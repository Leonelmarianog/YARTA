{"version":3,"sources":["Header.js","TodoForm.js","Todo.js","TodoList.js","App.js","index.js"],"names":["Header","className","style","color","TodoForm","props","state","fields","title","description","errors","handleChange","bind","handleSubmit","this","formIsValid","test","setState","event","preventDefault","handleValidation","handleEdit","handleAdd","target","name","value","buttonText","buttonColor","titleFocus","titleError","descriptionFocus","descriptionError","onSubmit","type","onChange","React","Component","defaultProps","Todo","isComplete","completedStyle","editForm","isFormVisible","onClick","handleComplete","handleForm","handleDelete","TodoList","todos","nextId","id","newTodos","filter","todo","saveTodos","newTodo","push","editedTodo","updatedTodos","map","key","localStorage","setItem","JSON","stringify","savedTodos","parse","getItem","savedId","length","clear","handleToggle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b4c060d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <nav className=\"level\">\r\n        <div className=\"level-item py-5\">\r\n          <div>\r\n            <h1 className=\"title is-spaced is-size-2 is-size-5-mobile is-size-4-tablet is-size-3-desktop has-text-white mt-0\">\r\n              YARTA: Yet Another React Todo App\r\n            </h1>\r\n            <h2 className=\"subtitle is-size-5 is-size-6-mobile is-size-5-tablet is-size-4-desktop has-text-white has-text-centered\">\r\n              Made with{\" \"}\r\n              <span\r\n                style={{ color: \"crimson\" }}\r\n                className=\"is-size-4 is-size-5-mobile is-size-4-tablet is-size-3-desktop\"\r\n              >\r\n                â™¥\r\n              </span>{\" \"}\r\n              by Leonel Gauna\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class TodoForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initial state of inputs\r\n    // If this component is used by the TodoList, the state is set to a default prop.\r\n    // Otherwise if this component is used by a Todo, then the state is set with props passed to said Todo.\r\n    this.state = {\r\n      fields: {\r\n        title: this.props.title,\r\n        description: this.props.description,\r\n      },\r\n      errors: {},\r\n    };\r\n\r\n    // method binding\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  // Input validation\r\n  handleValidation() {\r\n    let fields = this.state.fields;\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    // title validation\r\n    if (!fields.title) {\r\n      formIsValid = false;\r\n      errors.title = \"The Title field can't be empty\";\r\n    }\r\n\r\n    if (/[^A-Za-z0-9 ]+/.test(fields.title)) {\r\n      formIsValid = false;\r\n      errors.title = \"Only letters and numbers allowed\";\r\n    }\r\n\r\n    // description validation\r\n    if (!fields.description) {\r\n      formIsValid = false;\r\n      errors.description = \"The description field can't be empty\";\r\n    }\r\n\r\n    if (/[^A-Za-z0-9 ]+/.test(fields.description)) {\r\n      formIsValid = false;\r\n      errors.description = \"Only letters and numbers allowed\";\r\n    }\r\n\r\n    this.setState({ errors });\r\n    return formIsValid;\r\n  }\r\n\r\n  // Event handler to handle the submit of the form\r\n  // It validates the inputs and passes state to a parent component.\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    const isValid = this.handleValidation();\r\n    if (!isValid) return;\r\n\r\n    // clear errors\r\n    this.setState({ errors: {} });\r\n\r\n    if (this.props.handleEdit) {\r\n      this.props.handleEdit(this.state.fields);\r\n    } else {\r\n      this.props.handleAdd(this.state.fields);\r\n      this.setState({\r\n        fields: {\r\n          title: \"\",\r\n          description: \"\",\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // Event handler to keep track of the input data.\r\n  // This allows React to keep track of the state of the inputs.\r\n  handleChange(event) {\r\n    this.setState({\r\n      fields: {\r\n        ...this.state.fields,\r\n        [event.target.name]: event.target.value,\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const buttonText = this.props.handleEdit ? \"Save\" : \"Add Todo\";\r\n    const buttonColor = this.props.handleEdit ? \"is-success\" : \"is-black\";\r\n    const titleFocus = this.state.errors.title ? \"is-danger\" : \"\";\r\n    const titleError = this.state.errors.title ? (\r\n      <p className=\"help is-danger is-size-5 is-size-6-tablet is-size-6-mobile has-text-centered\">\r\n        {this.state.errors.title}\r\n      </p>\r\n    ) : null;\r\n    const descriptionFocus = this.state.errors.description ? \"is-danger\" : \"\";\r\n    const descriptionError = this.state.errors.description ? (\r\n      <p className=\"help is-danger is-size-5 is-size-6-tablet is-size-6-mobile has-text-centered\">\r\n        {this.state.errors.description}\r\n      </p>\r\n    ) : null;\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"mt-4\">\r\n        <div className=\"field is-horizontal\">\r\n          <div className=\"field-body\">\r\n            <div className=\"field-label is-normal\">\r\n              <label className=\"label has-text-white\">Title</label>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <input\r\n                  className={`input ${titleFocus}`}\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={this.state.fields.title}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n              {titleError}\r\n            </div>\r\n\r\n            <div className=\"field-label is-normal\">\r\n              <label className=\"label has-text-white\">Description</label>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <input\r\n                  className={`input ${descriptionFocus}`}\r\n                  type=\"text\"\r\n                  name=\"description\"\r\n                  value={this.state.fields.description}\r\n                  onChange={this.handleChange}\r\n                />\r\n              </div>\r\n              {descriptionError}\r\n            </div>\r\n\r\n            <div className=\"field is-grouped is-grouped-centered\">\r\n              <div className=\"control\">\r\n                <button type=\"submit\" className={`button ${buttonColor}`}>\r\n                  {buttonText}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nTodoForm.defaultProps = {\r\n  title: \"\",\r\n  description: \"\",\r\n};\r\n","import React from \"react\";\r\nimport TodoForm from \"./TodoForm.js\";\r\nimport \"./Todo.css\";\r\n\r\nexport default function Todo(props) {\r\n  const buttonText = props.isComplete ? \"not completed\" : \"completed\";\r\n  const completedStyle = props.isComplete\r\n    ? \"completed has-text-grey\"\r\n    : \"has-text-white\";\r\n  const editForm = props.isFormVisible ? (\r\n    <TodoForm\r\n      title={props.title}\r\n      description={props.description}\r\n      handleEdit={props.handleEdit}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={`box has-background-black-ter ${completedStyle}`}>\r\n      <h3 className=\"is-size-4\">{props.title}</h3>\r\n      <p className=\"is-size-5 mt-4 mb-5\">{props.description}</p>\r\n      <div className=\"buttons\">\r\n        <button\r\n          className=\"button is-black is-small\"\r\n          onClick={props.handleComplete}\r\n        >\r\n          Mark as {buttonText}\r\n        </button>\r\n        <button\r\n          className=\"button is-warning is-small\"\r\n          onClick={props.handleForm}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button\r\n          className=\"button is-danger is-small\"\r\n          onClick={props.handleDelete}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n      {editForm}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo.js\";\r\nimport TodoForm from \"./TodoForm.js\";\r\n\r\nexport default class TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initial state of the todos\r\n    // Each todo has an identifier, a title, and a description.\r\n    // The key \"isComplete\" is used to add/remove a style from the todo to show it as complete/incomplete.\r\n    // The key \"isFormVisible\" is used to show/hide an edit form on each todo.\r\n    this.state = {\r\n      todos: this.props.todos,\r\n      nextId: this.props.nextId,\r\n    };\r\n\r\n    // method binding\r\n    this.handleAdd = this.handleAdd.bind(this);\r\n  }\r\n\r\n  // These event handlers are passed down to child components as props. Each child will call these event handlers and pass\r\n  // them required data for this component to be able to update state and re-render their childs with new props.\r\n\r\n  // Event handler to delete a todo.\r\n  // it receives the id of a todo to identify it and remove it from state.\r\n  handleDelete(id) {\r\n    const newTodos = this.state.todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    this.setState({ todos: newTodos }, this.saveTodos);\r\n  }\r\n\r\n  // Event handler to add a new todo.\r\n  // It receives the data of a new todo and adds it to state.\r\n  handleAdd(newTodo) {\r\n    const newTodos = [...this.state.todos];\r\n    newTodos.push({ id: this.state.nextId, ...newTodo });\r\n    this.setState(\r\n      {\r\n        todos: newTodos,\r\n        nextId: this.state.nextId + 1,\r\n      },\r\n      this.saveTodos\r\n    );\r\n  }\r\n\r\n  // Event handler to edit a todo.\r\n  // It receives the id of a todo to identify it and the modified data of said todo.\r\n  // It updates state with the new data.\r\n  handleEdit(id, editedTodo) {\r\n    const updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return {\r\n          id,\r\n          ...editedTodo,\r\n        };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos }, this.saveTodos);\r\n  }\r\n\r\n  // Event handler to handle the state of each todo.\r\n  // It receives the id of a todo to identify it and a key that can be either \"isComplete\" or \"isFormVisible\"\r\n  // It updates the state of a todo to be either completed/incompleted or to show/hide a form.\r\n  handleToggle(id, key) {\r\n    const todos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return {\r\n          ...todo,\r\n          [key]: !todo[key],\r\n        };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: todos }, this.saveTodos);\r\n  }\r\n\r\n  // I need to  create this function so I can call it AFTER I set state.\r\n  // Remember that this.setState is asynchronous.\r\n  saveTodos() {\r\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n    localStorage.setItem(\"nextId\", this.state.nextId);\r\n  }\r\n\r\n  // Everytime this component is mounted, I want to check if there are todos to load.\r\n  // If there are todos, then I load them, if not, I clear local storage and exit.\r\n  // Why clear localStorage? Because when there are no todos, all that remains inside\r\n  // localStorage is an empty array and an identifier that I don't need.\r\n  componentDidMount() {\r\n    const savedTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n    const savedId = JSON.parse(localStorage.getItem(\"nextId\"));\r\n    if (savedTodos === null || savedTodos.length === 0) {\r\n      return localStorage.clear();\r\n    }\r\n    this.setState({ todos: savedTodos, nextId: savedId });\r\n  }\r\n\r\n  render() {\r\n    const todos = this.state.todos.map((todo) => {\r\n      return (\r\n        <Todo\r\n          key={todo.id}\r\n          title={todo.title}\r\n          description={todo.description}\r\n          isComplete={todo.isComplete}\r\n          isFormVisible={todo.isFormVisible}\r\n          handleDelete={this.handleDelete.bind(this, todo.id)} // method binding and also pass the id of each todo to be able to tell which one to delete\r\n          handleEdit={this.handleEdit.bind(this, todo.id)} // method binding and also pass the id of each todo to be able to tell which one to edit\r\n          handleComplete={this.handleToggle.bind(this, todo.id, \"isComplete\")}\r\n          handleForm={this.handleToggle.bind(this, todo.id, \"isFormVisible\")}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"container is-fluid\">\r\n        <TodoForm handleAdd={this.handleAdd} />\r\n        <main className=\"my-6\">{todos}</main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// These props are used when there are no todos to load from localStorage\r\nTodoList.defaultProps = {\r\n  todos: [\r\n    {\r\n      id: 0,\r\n      title: \"Build a vanilla JS App\",\r\n      description: \"Gotta practice the basics.\",\r\n      isComplete: false,\r\n      isFormVisible: false,\r\n    },\r\n    {\r\n      id: 1,\r\n      title: \"Build a React App\",\r\n      description: \"Practice makes perfect!.\",\r\n      isComplete: false,\r\n      isFormVisible: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Study more\",\r\n      description: \"I have to improve!.\",\r\n      isComplete: false,\r\n      isFormVisible: false,\r\n    },\r\n  ],\r\n  nextId: 3,\r\n};\r\n","import React from \"react\";\r\nimport Header from \"./Header.js\";\r\nimport TodoList from \"./TodoList.js\";\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <TodoList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./normalize.css\";\nimport \"./index.css\";\nimport \"bulma/css/bulma.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}