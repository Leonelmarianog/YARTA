{"version":3,"sources":["Header.js","TodoForm.js","Todo.js","TodoList.js","App.js","index.js"],"names":["Header","className","TodoForm","props","state","title","description","handleChange","bind","handleSubmit","event","preventDefault","test","this","handleEdit","handleAdd","setState","target","name","value","buttonText","buttonColor","error","onSubmit","type","onChange","required","React","Component","defaultProps","Todo","isComplete","completedStyle","editForm","isFormVisible","onClick","handleComplete","handleForm","handleDelete","TodoList","todos","nextId","id","newTodos","filter","todo","saveTodos","newTodo","push","editedTodo","updatedTodos","map","key","localStorage","setItem","JSON","stringify","savedTodos","parse","getItem","savedId","length","clear","handleToggle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3e01726f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <nav className=\"level\">\r\n        <div className=\"level-item py-5\">\r\n          <div>\r\n            <h1 className=\"title is-spaced is-size-2 is-size-4-mobile has-text-white mt-0\">\r\n              YARTA: Yet Another React Todo List\r\n            </h1>\r\n            <h2 className=\"subtitle is-size-5 has-text-white has-text-centered\">\r\n              Made by Leonel Gauna - 2020\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class TodoForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initial state of inputs\r\n    // If this component is used by the TodoList, the state is set to a default prop.\r\n    // Otherwise if this component is used by a Todo, then the state is set with props passed to said Todo.\r\n    this.state = {\r\n      title: this.props.title,\r\n      description: this.props.description,\r\n    };\r\n\r\n    // method binding\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  // Event handler to handle the submit of the form\r\n  // It validates the inputs and passes state to a parent component.\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    if (\r\n      /[^A-Za-z0-9 !.,]+/.test(this.state.title) ||\r\n      /[^A-Za-z0-9 !.,]+/.test(this.state.description)\r\n    ) {\r\n      return;\r\n    }\r\n    if (this.props.handleEdit) {\r\n      this.props.handleEdit(this.state);\r\n    } else {\r\n      this.props.handleAdd(this.state);\r\n    }\r\n  }\r\n\r\n  // Event handler to keep track of the input data.\r\n  // This allows React to keep track of the state of the inputs.\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const buttonText = this.props.handleEdit ? \"Save\" : \"Add Todo\";\r\n    const buttonColor = this.props.handleEdit ? \"is-success\" : \"is-black\";\r\n    // if input information is not valid, I want to render some error message.\r\n    let error = null;\r\n    if (\r\n      /[^A-Za-z0-9 !.,]+/.test(this.state.title) ||\r\n      /[^A-Za-z0-9 !.,]+/.test(this.state.description)\r\n    ) {\r\n      error = (\r\n        <div className=\"columns is-mobile mt-5\">\r\n          <div className=\"column is-half is-offset-one-quarter\">\r\n            <div className=\"notification is-danger\">\r\n              <p className=\"help is-size-5 is-size-6-mobile has-text-centered\">\r\n                Only letters and numbers allowed!\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className=\"mt-4\">\r\n        <div className=\"field is-horizontal\">\r\n          <div className=\"field-body\">\r\n            <div className=\"field-label is-normal\">\r\n              <label className=\"label has-text-white\">Title</label>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  value={this.state.title}\r\n                  onChange={this.handleChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"field-label is-normal\">\r\n              <label className=\"label has-text-white\">Description</label>\r\n            </div>\r\n\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <input\r\n                  className=\"input\"\r\n                  type=\"text\"\r\n                  name=\"description\"\r\n                  value={this.state.description}\r\n                  onChange={this.handleChange}\r\n                  required\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"field is-grouped is-grouped-centered\">\r\n              <div className=\"control\">\r\n                <button type=\"submit\" className={`button ${buttonColor}`}>\r\n                  {buttonText}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {error}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nTodoForm.defaultProps = {\r\n  title: \"\",\r\n  description: \"\",\r\n};\r\n","import React from \"react\";\r\nimport TodoForm from \"./TodoForm.js\";\r\nimport \"./Todo.css\";\r\n\r\nexport default function Todo(props) {\r\n  const buttonText = props.isComplete ? \"not completed\" : \"completed\";\r\n  const completedStyle = props.isComplete\r\n    ? \"completed has-text-grey\"\r\n    : \"has-text-white\";\r\n  const editForm = props.isFormVisible ? (\r\n    <TodoForm\r\n      title={props.title}\r\n      description={props.description}\r\n      handleEdit={props.handleEdit}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={`box has-background-black-ter ${completedStyle}`}>\r\n      <h3 className=\"is-size-4\">{props.title}</h3>\r\n      <p className=\"is-size-5 mt-4 mb-5\">{props.description}</p>\r\n      <div className=\"buttons\">\r\n        <button\r\n          className=\"button is-black is-small\"\r\n          onClick={props.handleComplete}\r\n        >\r\n          Mark as {buttonText}\r\n        </button>\r\n        <button\r\n          className=\"button is-warning is-small\"\r\n          onClick={props.handleForm}\r\n        >\r\n          Edit\r\n        </button>\r\n        <button\r\n          className=\"button is-danger is-small\"\r\n          onClick={props.handleDelete}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n      {editForm}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo.js\";\r\nimport TodoForm from \"./TodoForm.js\";\r\n\r\nexport default class TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // initial state of the todos\r\n    // Each todo has an identifier, a title, and a description.\r\n    // The key \"isComplete\" is used to add/remove a style from the todo to show it as complete/incomplete.\r\n    // The key \"isFormVisible\" is used to show/hide an edit form on each todo.\r\n    this.state = {\r\n      todos: this.props.todos,\r\n      nextId: this.props.nextId,\r\n    };\r\n\r\n    // method binding\r\n    this.handleAdd = this.handleAdd.bind(this);\r\n  }\r\n\r\n  // These event handlers are passed down to child components as props. Each child will call these event handlers and pass\r\n  // them required data for this component to be able to update state and re-render their childs with new props.\r\n\r\n  // Event handler to delete a todo.\r\n  // it receives the id of a todo to identify it and remove it from state.\r\n  handleDelete(id) {\r\n    const newTodos = this.state.todos.filter((todo) => {\r\n      return todo.id !== id;\r\n    });\r\n    this.setState({ todos: newTodos }, this.saveTodos);\r\n  }\r\n\r\n  // Event handler to add a new todo.\r\n  // It receives the data of a new todo and adds it to state.\r\n  handleAdd(newTodo) {\r\n    const newTodos = [...this.state.todos];\r\n    newTodos.push({ id: this.state.nextId, ...newTodo });\r\n    this.setState(\r\n      {\r\n        todos: newTodos,\r\n        nextId: this.state.nextId + 1,\r\n      },\r\n      this.saveTodos\r\n    );\r\n  }\r\n\r\n  // Event handler to edit a todo.\r\n  // It receives the id of a todo to identify it and the modified data of said todo.\r\n  // It updates state with the new data.\r\n  handleEdit(id, editedTodo) {\r\n    const updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return {\r\n          id,\r\n          ...editedTodo,\r\n        };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos }, this.saveTodos);\r\n  }\r\n\r\n  // Event handler to handle the state of each todo.\r\n  // It receives the id of a todo to identify it and a key that can be either \"isComplete\" or \"isFormVisible\"\r\n  // It updates the state of a todo to be either completed/incompleted or to show/hide a form.\r\n  handleToggle(id, key) {\r\n    const todos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        return {\r\n          ...todo,\r\n          [key]: !todo[key],\r\n        };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: todos }, this.saveTodos);\r\n  }\r\n\r\n  // I need to  create this function so I can call it AFTER I set state.\r\n  // Remember that this.setState is asynchronous.\r\n  saveTodos() {\r\n    localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\r\n    localStorage.setItem(\"nextId\", this.state.nextId);\r\n  }\r\n\r\n  // Everytime this component is mounted, I want to check if there are todos to load.\r\n  // If there are todos, then I load them, if not, I clear local storage and exit.\r\n  // Why clear localStorage? Because when there are no todos, all that remains inside\r\n  // localStorage is an empty array and an identifier that I don't need.\r\n  componentDidMount() {\r\n    const savedTodos = JSON.parse(localStorage.getItem(\"todos\"));\r\n    const savedId = JSON.parse(localStorage.getItem(\"nextId\"));\r\n    if (savedTodos === null || savedTodos.length === 0) {\r\n      return localStorage.clear();\r\n    }\r\n    this.setState({ todos: savedTodos, nextId: savedId });\r\n  }\r\n\r\n  render() {\r\n    const todos = this.state.todos.map((todo) => {\r\n      return (\r\n        <Todo\r\n          key={todo.id}\r\n          title={todo.title}\r\n          description={todo.description}\r\n          isComplete={todo.isComplete}\r\n          isFormVisible={todo.isFormVisible}\r\n          handleDelete={this.handleDelete.bind(this, todo.id)} // method binding and also pass the id of each todo to be able to tell which one to delete\r\n          handleEdit={this.handleEdit.bind(this, todo.id)} // method binding and also pass the id of each todo to be able to tell which one to edit\r\n          handleComplete={this.handleToggle.bind(this, todo.id, \"isComplete\")}\r\n          handleForm={this.handleToggle.bind(this, todo.id, \"isFormVisible\")}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"container is-fluid\">\r\n        <TodoForm handleAdd={this.handleAdd} />\r\n        <main className=\"my-6\">{todos}</main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// These props are used when there are no todos to load from localStorage\r\nTodoList.defaultProps = {\r\n  todos: [\r\n    {\r\n      id: 0,\r\n      title: \"Build a vanilla JS App\",\r\n      description: \"Gotta practice the basics.\",\r\n      isComplete: false,\r\n      isFormVisible: false,\r\n    },\r\n    {\r\n      id: 1,\r\n      title: \"Build a React App\",\r\n      description: \"Practice makes perfect!.\",\r\n      isComplete: false,\r\n      isFormVisible: false,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Study more\",\r\n      description: \"I have to improve!.\",\r\n      isComplete: false,\r\n      isFormVisible: false,\r\n    },\r\n  ],\r\n  nextId: 3,\r\n};\r\n","import React from \"react\";\r\nimport Header from \"./Header.js\";\r\nimport TodoList from \"./TodoList.js\";\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <TodoList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./normalize.css\";\nimport \"./index.css\";\nimport \"bulma/css/bulma.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}